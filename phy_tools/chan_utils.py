#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Tue May 4 12:28:03 2021

@author: phil
"""
from phy_tools.gen_utils import ret_module_name, ret_valid_path
from phy_tools.fp_utils import ret_num_bitsU, dec_to_ubin, ufi
from phy_tools.verilog_gen import name_help, add_apache_license
import os
import numpy as np
import ipdb


def gen_chan_name(chan_obj):
    """
        Helper function.  Generates channelizer module name based on channelizer parameters.

    """
    Mmax = chan_obj.Mmax
    taps_per_phase = chan_obj.taps_per_phase
    pfb_iw = chan_obj.qvec[0]
    pfb_ow = chan_obj.qvec[0]
    gen_2X = chan_obj.gen_2X

    if gen_2X:
        mod_name = 'chan_top_2x_{}M_{}iw_{}ow_{}tps'.format(Mmax, pfb_iw, pfb_ow, taps_per_phase)
    else:
        mod_name = 'chan_top_{}M_{}iw_{}ow_{}tps'.format(Mmax, pfb_iw, pfb_ow, taps_per_phase)

    return mod_name


def gen_do_file(path, Mmax, gen_2X, chan_name, exp_tuple, inbuff_tuple, pfb_tuple, down_tuple, final_cnt_name):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)
    exp_name, cic_name, cic_fifo, slicer_name, exp_fifo, comb_name, comb_fifo = exp_tuple
    inbuff_in_fifo = inbuff_tuple[3]
    inbuff_out_fifo = inbuff_tuple[4]
    inbuff_in_cnt = inbuff_tuple[1]
    inbuff_out_cnt = inbuff_tuple[2]
    pfb_name, _, _, pfb_fifo = pfb_tuple
    select_name, mux_name = down_tuple
    mod_name = chan_name + '_sim.do'
    file_name = path + mod_name
    fifos = np.unique([cic_fifo, pfb_fifo, exp_fifo, comb_fifo, inbuff_in_fifo, inbuff_out_fifo]).tolist()
    cnt_blocks = np.unique([inbuff_in_cnt, inbuff_out_cnt, final_cnt_name]).tolist()
    with open(file_name, 'w') as fh:
        add_apache_license(fh, cstr='#')
        fh.write('###############################################################################\n')
        fh.write('#\n')
        fh.write('# Workspace and design setup.\n')
        fh.write('#\n')
        fh.write('###############################################################################\n')
        fh.write('# Name of workspace.\n')
        fh.write('set WORKSPACE "channelizer"\n')
        fh.write('\n')
        fh.write('# Name of design in workspace.\n')
        fh.write('set DESIGN "chan_top"\n')
        fh.write('\n')
        fh.write('# Root directory for project.\n')
        fh.write('set PROJECT_ROOT $env(HOME)/insert path here\n')
        fh.write('\n')
        fh.write('# Aldec Riviera Pro install location.\n')
        fh.write('set ALDEC_HOME $env(ALDEC_HOME)\n')
        fh.write('\n')
        fh.write('# Simulation scripts, waveforms, etc.\n')
        fh.write('set PROJ_SIM "$PROJECT_ROOT/sim"\n')
        fh.write('\n')
        fh.write('set PROJ_SRC_ROOT "$PROJECT_ROOT/src"\n')
        fh.write('\n')
        fh.write('set VIVADO_ROOT "/opt/Xilinx/Vivado/2018.2/"\n')
        fh.write('set GLBL_FILE "$VIVADO_ROOT/data/verilog/src/glbl.v"\n')
        fh.write('\n')
        fh.write('###############################################################################\n')
        fh.write('#\n')
        fh.write('# Source locations.\n')
        fh.write('#\n')
        fh.write('###############################################################################\n')
        fh.write('# Verilog source.\n')
        fh.write('set PROJ_SRC "$PROJ_SRC_ROOT/verilog"\n')
        fh.write('\n')
        fh.write('###############################################################################\n')
        fh.write('#\n')
        fh.write('# Workspace and project creation.\n')
        fh.write('#\n')
        fh.write('###############################################################################\n')
        fh.write('# End any running simulation.\n')
        fh.write('framework.documents.closeall\n')
        fh.write('catch {\n')
        fh.write('    endsim\n')
        fh.write('}\n')
        fh.write('\n')
        fh.write('# Close current workspace.\n')
        fh.write('catch {\n')
        fh.write('    workspace.close\n')
        fh.write('}\n')
        fh.write('\n')
        fh.write('# Create workspace if it does not already exist.\n')
        fh.write('if { [ catch { workspace.create $WORKSPACE $PROJ_SIM } ] } {\n')
        fh.write('    puts stdout "Opening workspace $WORKSPACE"\n')
        fh.write('    workspace.open $PROJ_SIM/$WORKSPACE/$WORKSPACE.rwsp\n')
        fh.write('} else {\n')
        fh.write('    puts stdout "Creating workspace $WORKSPACE"\n')
        fh.write('}\n')
        fh.write('\n')
        fh.write('catch {\n')
        fh.write('    workspace.design.remove $DESIGN\n')
        fh.write('}\n')
        fh.write('\n')
        fh.write('catch {\n')
        fh.write('    file delete -force $PROJ_SIM/$WORKSPACE/$DESIGN\n')
        fh.write('}\n')
        fh.write('catch {\n')
        fh.write('    workspace.design.create $DESIGN . -template $ALDEC_HOME/config/design_templates/default.rdsn }\n')
        fh.write('\n')
        fh.write('alib work $PROJ_SIM/$WORKSPACE/$DESIGN/work.lib\n')
        fh.write('set worklib work\n')
        fh.write('\n')
        fh.write('###############################################################################\n')
        fh.write('#\n')
        fh.write('# Create and build design and add source files.\n')
        fh.write('#\n')
        fh.write('###############################################################################\n')
        fh.write('# Set design properties.  Refer to $ALDEC_HOME/config/preferences/compilation.pref\n')
        fh.write('# for valid properties.\n')
        fh.write('design.property compilation/verilog/verilog-libraries unisims_ver\n')
        fh.write('design.property compilation/verilog/verilog-libraries glbl\n')
        fh.write('design.property compilation/verilog/enable-incremental-compilation true\n')
        fh.write('design.property compilation/vhdl/enable-incremental-compilation true\n')
        fh.write('\n')
        fh.write('#design.file.add $GLBL_FILE\n')
        fh.write('design.file.add $PROJ_SRC/xfft_{}_sim_netlist.v\n'.format(Mmax))
        fh.write('\n')
        fh.write('design.file.add $PROJ_SRC/chan_sim.vh\n')
        fh.write('design.file.add $PROJ_SRC/grc_word_writer.sv\n')
        fh.write('design.file.add $PROJ_SRC/grc_word_reader.sv\n')
        fh.write('\n')
        fh.write('# Set dependency on xfft so it is compiled after top.\n')
        fh.write('catch {\n')
        fh.write('    design.dependencies.add channelizer_top.v xfft_{}_sim_netlist.vhd\n'.format(Mmax))
        fh.write('}\n')
        fh.write('\n')
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(mux_name))
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(select_name))
        fh.write('\n')
        fh.write('design.file.add $PROJ_SRC/dp_block_read_first_ram.v\n')
        fh.write('design.file.add $PROJ_SRC/dp_block_write_first_ram.v\n')
        for fifo_name in fifos:
            fh.write(f'design.file.add $PROJ_SRC/{fifo_name}.v\n')
        for cnt_name in cnt_blocks:
            fh.write(f'design.file.add $PROJ_SRC/{cnt_name}.v\n')
        # fh.write('design.file.add $PROJ_SRC/count_cycle_cw8_18.v\n')
        fh.write('design.file.add $PROJ_SRC/{}_correction_sp_rom.v\n'.format(cic_name))
        fh.write('design.file.add $PROJ_SRC/{}_offset_sp_rom.v\n'.format(cic_name))
        fh.write('design.file.add $PROJ_SRC/dsp48_{}_corr.v\n'.format(cic_name))
        fh.write('design.file.add $PROJ_SRC/dsp48_{}.v\n'.format(cic_name))
        fh.write('design.file.add $PROJ_SRC/dsp48_{}.v\n'.format(comb_name))
        # fh.write('design.file.add $PROJ_SRC/dsp48_output_add.v\n')
        fh.write('design.file.add $PROJ_SRC/dsp48_pfb_mac_0.v\n')
        fh.write('design.file.add $PROJ_SRC/dsp48_pfb_mac.v\n')
        fh.write('design.file.add $PROJ_SRC/dsp48_pfb_rnd.v\n')
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(comb_name))
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(cic_name))
        fh.write('design.file.add $PROJ_SRC/{}_dp_rom.v\n'.format(pfb_name))
        fh.write('design.file.add $PROJ_SRC/mem_ctrl_{}.v\n'.format(pfb_name))
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(slicer_name))
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(pfb_name))
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(exp_name))
        if gen_2X:
            fh.write('design.file.add $PROJ_SRC/axi_fifo_19.v\n')
            fh.write('design.file.add $PROJ_SRC/circ_buffer.v\n')
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(inbuff_tuple[0]))
        fh.write('\n')
        fh.write('design.file.add $PROJ_SRC/{}.v\n'.format(chan_name))
        fh.write('design.file.add $PROJ_SRC/{}_tb.v\n'.format(chan_name))
        fh.write('\n')
        fh.write('design.compile $DESIGN\n')
        fh.write('\n')
        fh.write('###############################################################################\n')
        fh.write('#\n')
        fh.write('# Run simulation.\n')
        fh.write('#\n')
        fh.write('###############################################################################\n')
        fh.write('design.simulation.initialize {}_tb glbl\n'.format(chan_name))
        fh.write('\n')
        fh.write('run 4000 us\n')

def gen_chan_tb(path, chan_obj, mask_len):

    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)

    AVG_LEN = 128

    full_path = os.path.abspath(path)
    Mmax = chan_obj.Mmax

    fft_bits = ret_num_bitsU(Mmax)

    chan_name = gen_chan_name(chan_obj)
    mod_name = chan_name + '_tb'

    # set payload length to yield integer number of bin cycles that yields a packet of 4096 bytes

    bytes_per_vec = mask_len * 4
    num_cycles = 4096 // bytes_per_vec
    payload_len = num_cycles * mask_len
    print("mask_len = {}, num_cycles = {}, payload_len = {}".format(mask_len, num_cycles, payload_len))

    idx_bytes = int(np.ceil(ret_num_bitsU(Mmax - 1) / 8.))
    tuser_bits = idx_bytes * 8 + 8

    file_name = name_help(mod_name, path)
    with open(file_name, 'w') as fh:
        add_apache_license(fh)
        fh.write('// Top level testbench\n')
        fh.write('\n')
        fh.write('`timescale 1ns/1ps\n')
        fh.write('\n')
        fh.write('module {}();\n'.format(mod_name))
        fh.write('\n')
        fh.write('function integer clog2;\n')
        fh.write(' //\n')
        fh.write(' // ceiling( log2( x ) )\n')
        fh.write(' //\n')
        fh.write(' input integer x;\n')
        fh.write(' begin\n')
        fh.write('   if (x<=0) clog2 = -1;\n')
        fh.write('   else clog2 = 0;\n')
        fh.write('   x = x - 1;\n')
        fh.write('   while (x>0) begin\n')
        fh.write('     clog2 = clog2 + 1;\n')
        fh.write('     x = x >> 1;\n')
        fh.write('   end\n')
        fh.write('\n')
        fh.write(' end\n')
        fh.write('endfunction\n')
        fh.write('\n')
        fh.write("localparam stimulus = \"{}/sig_tones_{}.bin\";\n".format(full_path, Mmax))
        fh.write("localparam mask_file = \"{}/M_{}_mask.bin\";\n".format(full_path, Mmax))
        fh.write("localparam output_file = \"{}/chan_results.bin\";\n".format(full_path))
        fh.write('\n')
        fh.write('integer input_descr, mask_descr, output_descr;\n')
        fh.write('\n')
        fh.write('initial begin\n')
        fh.write('    input_descr = $fopen(stimulus, "rb");\n')
        fh.write('    mask_descr = $fopen(mask_file, "rb");\n')
        fh.write('    output_descr = $fopen(output_file, "wb");\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('reg clk = 1\'b0;\n')
        fh.write('reg sync_reset = 1\'b0;\n')
        fh.write('\n')
        fh.write('always #2.5 clk <= ~clk;\n')
        fh.write('\n')
        fh.write('wire s_axis_tvalid, s_axis_tready;\n')
        fh.write('wire m_axis_tvalid, m_axis_tready;\n')
        fh.write('wire [{}:0] m_axis_tuser;\n'.format(tuser_bits - 1))
        fh.write('wire [31:0] m_axis_tdata;\n')
        fh.write('wire m_axis_tlast;\n')
        fh.write('\n')
        fh.write('wire [63:0] word_cnt;\n')
        fh.write('wire [31:0] s_axis_tdata;\n')
        fh.write('wire eob_tag;\n')
        fh.write('reg data_enable = 1\'b0;\n')
        fh.write('\n')
        fh.write('// wire s_axis_reload_tvalid;\n')
        fh.write('// wire [31:0] s_axis_reload_tdata;\n')
        fh.write('// wire s_axis_reload_tlast;\n')
        fh.write('// wire s_axis_reload_tready;\n')
        fh.write('\n')
        fh.write('wire s_axis_select_tvalid;\n')
        fh.write('wire [31:0] s_axis_select_tdata;\n')
        fh.write('wire s_axis_select_tlast;\n')
        fh.write('wire s_axis_select_tready;\n')
        fh.write('\n')
        fh.write('wire [31:0] FFT_MAX; \n')
        fh.write('wire [31:0] NUM_TAPS; \n')
        fh.write('wire [31:0] PFB_MSB;\n')
        fh.write('wire [31:0] FIL_K; // QVEC == unsigned(32, 24)\n')
        fh.write('wire [31:0] FIL_OFFSET; // QVEC == unsigned(32, 24)\n')
        fh.write('\n')
        fh.write('reg flow_ctrl = 1\'b0;\n')
        fh.write('\n')
        fh.write('localparam FFT_SIZE_WIDTH = clog2(512) + 1;\n')
        fh.write('reg [FFT_SIZE_WIDTH-1:0] FFT_SIZE = 512;\n')
        fh.write('\n')
        fh.write('// reset signal process.\n')
        fh.write('initial begin\n')
        fh.write('  #10\n')
        fh.write('  sync_reset = 1\'b1;\n')
        fh.write('  #100  //repeat(10) @(posedge clk);\n')
        fh.write('  sync_reset = 1\'b0;\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('initial begin\n')
        fh.write('    #90000  // wait 90 us to start data flowing -- allows the taps to be written.\n')
        fh.write('    data_enable = 1\'b1;\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('// flow ctrl signal\n')
        fh.write('initial begin\n')
        fh.write('    forever begin\n')
        fh.write('        #50 flow_ctrl = 1\'b1;\n')
        fh.write('        #100 flow_ctrl = 1\'b0;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('grc_word_reader #(\n')
        fh.write('    .NUM_BYTES(4),\n')
        fh.write('    .FRAME_SIZE(1024)\n')
        fh.write(')\n')
        fh.write('u_data_reader\n')
        fh.write('(\n')
        fh.write('  .clk(clk),\n')
        fh.write('  .sync_reset(sync_reset),\n')
        fh.write('  .enable_i(data_enable),\n')
        fh.write('\n')
        fh.write('  .fd(input_descr),\n')
        fh.write('\n')
        fh.write('  .valid_o(s_axis_tvalid),\n')
        fh.write('  .word_o(s_axis_tdata),\n')
        fh.write('  .buffer_end_o(),\n')
        fh.write('  .len_o(),\n')
        fh.write('  .word_cnt(),\n')
        fh.write('\n')
        fh.write('  .ready_i(s_axis_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('grc_word_reader #(\n')
        fh.write('    .NUM_BYTES(4),\n')
        fh.write('    .FRAME_SIZE(1024)\n')
        fh.write(')\n')
        fh.write('u_mask_reader\n')
        fh.write('(\n')
        fh.write('  .clk(clk),\n')
        fh.write('  .sync_reset(sync_reset),\n')
        fh.write('  .enable_i(1\'b1),\n')
        fh.write('\n')
        fh.write('  .fd(mask_descr),\n')
        fh.write('\n')
        fh.write('  .valid_o(s_axis_select_tvalid),\n')
        fh.write('  .word_o(s_axis_select_tdata),\n')
        fh.write('  .buffer_end_o(s_axis_select_tlast),\n')
        fh.write('  .len_o(),\n')
        fh.write('  .word_cnt(word_cnt),\n')
        fh.write('\n')
        fh.write('  .ready_i(s_axis_select_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('{} u_dut\n'.format(chan_name))
        fh.write('(\n')
        fh.write('   .clk(clk),\n')
        fh.write('   .sync_reset(sync_reset),\n')
        fh.write('\n')
        fh.write('   .s_axis_tvalid(s_axis_tvalid),\n')
        fh.write('   .s_axis_tdata(s_axis_tdata),\n')
        fh.write('   .s_axis_tready(s_axis_tready),\n')
        fh.write('\n')
        fh.write('   .s_axis_reload_tvalid(1\'b0),\n')
        fh.write('   .s_axis_reload_tdata(32\'d0),\n')
        fh.write('   .s_axis_reload_tlast(1\'b0),\n')
        fh.write('   .s_axis_reload_tready(s_axis_reload_tready),\n')
        fh.write('\n')
        fh.write('   .s_axis_select_tvalid(s_axis_select_tvalid),\n')
        fh.write('   .s_axis_select_tdata(s_axis_select_tdata),\n')
        fh.write('   .s_axis_select_tlast(s_axis_select_tlast),\n')
        fh.write('   .s_axis_select_tready(s_axis_select_tready),\n')
        fh.write('\n')
        fh.write('   .fft_size({}\'d{}),\n'.format(fft_bits, Mmax))
        fh.write('   .avg_len(9\'d{}),\n'.format(AVG_LEN))
        fh.write('   .payload_length(16\'d{}),\n'.format(payload_len))
        fh.write('   .eob_tag(eob_tag),\n')
        fh.write('    // Core Constants\n')
        fh.write('    .FFT_MAX(FFT_MAX),\n')
        fh.write('    .NUM_TAPS(NUM_TAPS),\n')
        fh.write('    .PFB_MSB(PFB_MSB),\n')
        fh.write('    .FIL_K(FIL_K),\n')
        fh.write('    .FIL_OFFSET(FIL_OFFSET),\n')
        fh.write('\n')
        fh.write('   .m_axis_tvalid(m_axis_tvalid),\n')
        fh.write('   .m_axis_tdata(m_axis_tdata),\n')
        fh.write('   .m_axis_tuser(m_axis_tuser),\n')
        fh.write('   .m_axis_tlast(m_axis_tlast),\n')
        fh.write('   .m_axis_tready(m_axis_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('wire [63:0] store_vec;\n')
        fh.write('\n')
        t_bits = 32 + tuser_bits + 1
        pad_bits = 64 - t_bits
        fh.write('assign store_vec = {{{}\'d0, m_axis_tlast, m_axis_tuser, m_axis_tdata}};\n'.format(pad_bits))
        fh.write('\n')
        fh.write('grc_word_writer #(\n')
        fh.write('	.LISTEN_ONLY(0),\n')
        fh.write('	.ARRAY_LENGTH(1024),\n')
        fh.write('	.NUM_BYTES(8))\n')
        fh.write('u_writer\n')
        fh.write('(\n')
        fh.write('  .clk(clk),\n')
        fh.write('  .sync_reset(sync_reset),\n')
        fh.write('  .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('  .fd(output_descr),\n')
        fh.write('\n')
        fh.write('  .valid(m_axis_tvalid),\n')
        fh.write('  .word(store_vec),\n')
        fh.write('\n')
        fh.write('  .wr_file(1\'b0),\n')
        fh.write('  .word_cnt(),\n')
        fh.write('\n')
        fh.write('  .rdy_i(flow_ctrl),\n')
        fh.write('  .rdy_o(m_axis_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('endmodule //\n')


def calc_fft_tuser_width(Mmax):
    idx_bytes = int(np.ceil(ret_num_bitsU(Mmax - 1) / 8.))
    tuser_bits = idx_bytes * 8 + 8
    return tuser_bits


def gen_chan_top(path, chan_obj, shift_name, pfb_name, fft_name, final_cnt_name):  # gen_2X, Mmax, taps_per_phase, pfb_iw, pfb_ow):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)

    shift_name = ret_module_name(shift_name)
    pfb_name = ret_module_name(pfb_name)

    Mmax = chan_obj.Mmax
    mod_name = gen_chan_name(chan_obj)
    pfb_iw = chan_obj.qvec[0]
    gen_2X = chan_obj.gen_2X

    file_name = name_help(mod_name, path)
    module_name = ret_module_name(file_name)

    data_width = pfb_iw * 2
    num_fft_sizes = int(np.log2(Mmax)) - 2
    fft_bits = ret_num_bitsU(Mmax)

    tuser_bits = calc_fft_tuser_width(Mmax)

    with open(file_name, 'w') as fh:
        add_apache_license(fh)
        fh.write('//***************************************************************************--\n')
        fh.write('//\n')
        fh.write('// Author : PJV\n')
        fh.write('// File : channelizer_top\n')
        fh.write('// Description : Top level wrapper for the M/2 Polyphase Channelizer bank.\n')
        fh.write('//\n')
        fh.write('//***************************************************************************--\n')
        fh.write('\n')
        fh.write('// no timescale needed\n')
        fh.write('`include "chan_sim.vh"\n')
        fh.write('\n')
        fh.write('module {}\n'.format(module_name))
        fh.write('(\n')
        fh.write('    input clk,\n')
        fh.write('    input sync_reset,\n')
        fh.write('\n')
        fh.write('    input s_axis_tvalid,\n')
        fh.write('    // Note that the convention is Real is mapped to [2N-1:N] Imag is mapped [N-1:0], where N is sample size\n')
        fh.write('    input [{}:0] s_axis_tdata,\n'.format(data_width - 1))
        fh.write('    output s_axis_tready,\n')
        fh.write('\n')
        fh.write('    input s_axis_reload_tvalid,\n')
        fh.write('    input [31:0] s_axis_reload_tdata,\n')
        fh.write('    input s_axis_reload_tlast,\n')
        fh.write('    output s_axis_reload_tready,\n')
        fh.write('\n')
        fh.write('    // down selection FIFO interface\n')
        fh.write('    input s_axis_select_tvalid,\n')
        fh.write('    input [{}:0] s_axis_select_tdata,\n'.format(data_width - 1))
        fh.write('    input s_axis_select_tlast,\n')
        fh.write('    output s_axis_select_tready,\n')
        fh.write('\n')
        fh.write('    input [{}:0] fft_size,\n'.format(fft_bits - 1))
        fh.write('    input [8:0] avg_len,\n')
        fh.write('    input [15:0] payload_length,\n')
        fh.write('    output eob_tag,\n')
        fh.write('\n')
        fh.write('    // Core Constants\n')
        fh.write('    output [31:0] FFT_MAX,\n')
        fh.write('    output [31:0] NUM_TAPS,\n')
        fh.write('    output [31:0] PFB_MSB,\n')
        fh.write('    output [31:0] FIL_K, // QVEC == unsigned(32, 24)\n')
        fh.write('    output [31:0] FIL_OFFSET, // QVEC == unsigned(32, 24)\n')
        fh.write('\n')
        fh.write('    output m_axis_tvalid,\n')
        fh.write('    // Note that the convention is Real is mapped to [2N-1:N] Imag is mapped [N-1:0], where N is sample size\n')
        fh.write('    output [{}:0] m_axis_tdata,\n'.format(data_width - 1))
        fh.write('    output [{}:0] m_axis_tuser,\n'.format(tuser_bits - 1))
        fh.write('    output m_axis_tlast,\n')
        fh.write('    input m_axis_tready\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('// currently only supporting up to 2048 bins.\n')
        fh.write('// Average Floating Point Exponent averaging length\n')
        fh.write('\n')
        for i in range(num_fft_sizes):
            fft_size = 2**(i + 3)
            fh.write('localparam FFT_{} = {};\n'.format(fft_size, fft_size))

        fh.write('localparam UPPER_IDX = {};\n'.format(data_width - 1))
        fh.write('localparam HALF_IDX = {};\n'.format(data_width // 2))
        fh.write('localparam LOWER_IDX = {};\n'.format(data_width // 2 - 1))
        fh.write('\n')
        fh.write('reg [4:0] nfft, next_nfft;\n')
        fh.write('reg [{}:0] fft_size_s;\n'.format(fft_bits - 1))
        fh.write('wire event_frame_started;\n')
        fh.write('wire event_tlast_unexpected;\n')
        fh.write('wire event_tlast_missing;\n')
        fh.write('wire event_status_channel_halt;\n')
        fh.write('wire event_data_in_channel_halt;\n')
        fh.write('wire event_data_out_channel_halt;\n')
        fh.write('\n')
        fh.write('reg async_reset, async_reset_d1;\n')
        fh.write('reg reset_int,  next_reset_int;\n')
        fh.write('reg [4:0] reset_cnt, next_reset_cnt;\n')
        fh.write('\n')
        fh.write('localparam [4:0] RESET_ZEROS = 5\'d0;\n')
        fh.write('localparam [4:0] RESET_HIGH_CNT = 5\'b01000;  // buffer signals\n')
        fh.write('\n')
        fh.write('// internal payload_length register\n')
        fh.write('reg [15:0] payload_length_s, payload_length_m1;\n')
        fh.write('\n')
        fh.write('wire buffer_tvalid;\n')
        fh.write('wire [{}:0] buffer_tdata;\n'.format(data_width - 1))
        fh.write('wire buffer_tlast;\n')
        fh.write('wire [{}:0] buffer_phase;\n'.format(fft_bits - 2))
        fh.write('wire buffer_tready;\n')
        fh.write('\n')
        fh.write('// pfb signals\n')
        fh.write('wire pfb_tvalid;\n')
        fh.write('wire [{}:0] pfb_tdata, pfb_tdata_s;\n'.format(data_width - 1))
        fh.write('wire pfb_tlast;\n')
        fh.write('wire [{}:0] pfb_phase;\n'.format(fft_bits - 2))
        fh.write('wire [{}:0] circ_phase;\n'.format(fft_bits - 2))
        fh.write('wire pfb_tready;\n')
        fh.write('\n')
        if gen_2X:
            fh.write('// circular buffer signals\n')
            fh.write('wire circ_tvalid;\n')
            fh.write('wire [{}:0] circ_tdata;\n'.format(data_width - 1))
            fh.write('wire circ_tlast;\n')
            fh.write('wire circ_tready;\n')
        fh.write('\n')
        fh.write('// fft data signals\n')
        fh.write('wire fft_tvalid;\n')
        fh.write('wire [{}:0] fft_tdata;\n'.format(data_width - 1))
        fh.write('wire [{}:0] fft_tdata_s;\n'.format(data_width - 1))
        fh.write('wire [{}:0] fft_tuser;\n'.format(tuser_bits - 1))
        fh.write('wire fft_tlast;\n')
        fh.write('wire fft_tready;\n')
        fh.write('\n')
        fh.write('// fft config signals.\n')
        fh.write('reg fft_config_tvalid, next_fft_config_tvalid;\n')
        fh.write('wire fft_config_tready;\n')
        fh.write('wire [15:0] fft_config_tdata;  // fft status signals\n')
        fh.write('\n')
        fh.write('// exp shift signals\n')
        fh.write('wire shift_tvalid;\n')
        fh.write('wire [{}:0] shift_tdata;\n'.format(data_width - 1))
        fh.write('wire [{}:0] shift_tuser;\n'.format(tuser_bits - 1))
        fh.write('wire shift_tlast;\n')
        fh.write('wire shift_tready;\n')
        fh.write('wire shift_eob_tag;\n')
        fh.write('\n')
        fh.write('// down select signals\n')
        fh.write('wire down_sel_tvalid;\n')
        fh.write('wire [{}:0] down_sel_tdata;\n'.format(data_width - 1))
        fh.write('wire [{}:0] down_sel_tuser;\n'.format(tuser_bits - 1))
        fh.write('wire down_sel_tlast;\n')
        fh.write('wire down_sel_tready;\n')
        fh.write('\n')
        fh.write('// output signals\n')
        fh.write('wire m_axis_tvalid_s;\n')
        fh.write('wire [{}:0] m_axis_tdata_s;\n'.format(data_width - 1))
        fh.write('wire m_axis_tready_s;\n')
        fh.write('wire m_axis_tlast_s;\n')
        fh.write('wire [{}:0] m_axis_tuser_s;\n'.format(tuser_bits - 1))
        fh.write('\n')
        fh.write('wire [7:0] m_axis_status_tdata;\n')
        fh.write('wire m_axis_status_tvalid;\n')
        fh.write('wire m_axis_status_tready = 1\'b1;\n')
        fh.write('\n')
        fh.write('localparam S_CONFIG = 0, S_IDLE = 1;\n')
        fh.write('reg config_state, next_config_state;\n')
        fh.write('\n')
        fh.write('assign m_axis_tvalid = m_axis_tvalid_s;\n')
        fh.write('assign m_axis_tready_s = m_axis_tready;\n')
        fh.write('assign m_axis_tdata = m_axis_tdata_s;\n')
        fh.write('assign m_axis_tuser = m_axis_tuser_s;\n')
        fh.write('assign m_axis_tlast = m_axis_tlast_s;\n')
        fh.write('assign fft_config_tdata = {11\'d0,nfft};\n')
        fh.write('assign pfb_tdata = {pfb_tdata_s[LOWER_IDX:0],pfb_tdata_s[UPPER_IDX:HALF_IDX]};\n')
        fh.write('assign fft_tdata = {fft_tdata_s[LOWER_IDX:0],fft_tdata_s[UPPER_IDX:HALF_IDX]};\n')
        fh.write('\n')
        fh.write(f'assign FFT_MAX = 32\'d{chan_obj.Mmax};\n')
        fh.write(f'assign NUM_TAPS = 32\'d{chan_obj.num_taps};\n')
        fh.write(f'assign PFB_MSB = 32\'d{chan_obj.pfb_msb};\n')
        fh.write(f'assign FIL_K = 32\'d{ufi(chan_obj.K, (32, 24)).vec[0]}; // QVEC == unsigned(32, 24)\n')
        fh.write(f'assign FIL_OFFSET = 32\'d{ufi(chan_obj.offset, (32, 24)).vec[0]}; // QVEC == unsigned(32, 24)\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_fft_config_tvalid = 1\'b0;\n')
        fh.write('    next_config_state = config_state;\n')
        fh.write('    next_nfft = nfft;\n')
        fh.write('    case(config_state)\n')
        fh.write('        S_CONFIG :\n')
        fh.write('        begin\n')
        fh.write('            if (fft_config_tready == 1\'b1) begin\n')
        fh.write('                next_fft_config_tvalid = 1\'b1;\n')
        fh.write('                next_config_state = S_IDLE;\n')
        fh.write('            end\n')

        fh.write('            if (fft_size == FFT_8) begin\n')

        fh.write('                next_nfft = 5\'b00011;\n')
        for i in range(1, num_fft_sizes):
            fft_size = 2 ** (i + 3)
            fh.write('            end else if (fft_size == FFT_{}) begin\n'.format(fft_size))
            bin_value = dec_to_ubin(int(np.log2(fft_size)), 5)
            fh.write('                next_nfft = 5\'b{};\n'.format(bin_value))
        fh.write('            end else begin\n')
        fh.write('                next_nfft = 5\'b00011;\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_IDLE :\n')
        fh.write('        begin\n')
        fh.write('            if (async_reset == 1\'b1 && async_reset_d1 == 1\'b0) begin\n')
        fh.write('                next_config_state = S_CONFIG;\n')
        fh.write('            end else begin\n')
        fh.write('                next_config_state = S_IDLE;\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        default :\n')
        fh.write('        begin\n')
        fh.write('        end\n')
        fh.write('    endcase\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @(posedge clk, posedge sync_reset)\n')
        fh.write('begin\n')
        fh.write('    if (sync_reset == 1\'b1) begin\n')
        fh.write('        config_state <= S_IDLE;\n')
        fh.write('        fft_config_tvalid <= 1\'b0;\n')
        fh.write('        nfft <= 5\'b00011;\n')
        fh.write('        fft_size_s <= {}\'d8;\n'.format(fft_bits))
        fh.write('        // default to 8\n')
        fh.write('        reset_cnt <= 5\'d31;\n')
        fh.write('        reset_int <= 1\'b1;\n')
        fh.write('    end else begin\n')
        fh.write('        config_state <= next_config_state;\n')
        fh.write('        fft_config_tvalid <= next_fft_config_tvalid;\n')
        fh.write('        nfft <= next_nfft;\n')
        fh.write('        if (fft_size != 0) begin\n')
        fh.write('            fft_size_s <= fft_size;\n')
        fh.write('        end\n')
        fh.write('        reset_cnt <= next_reset_cnt;\n')
        fh.write('        reset_int <= next_reset_int;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @(posedge clk)\n')
        fh.write('begin\n')
        fh.write('    async_reset <= !(sync_reset | reset_int);\n')
        fh.write('    async_reset_d1 <= async_reset;\n')
        fh.write('    payload_length_s <= payload_length;\n')
        fh.write('    payload_length_m1 <= payload_length_s - 1;\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('  // ensures that reset pulse is wide enough for all blocks.\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_reset_cnt = reset_cnt;\n')
        fh.write('    if (fft_size_s != fft_size || payload_length_s != payload_length) begin\n')
        fh.write('        next_reset_cnt = RESET_HIGH_CNT;\n')
        fh.write('    end else if (reset_cnt != 0) begin\n')
        fh.write('        next_reset_cnt = reset_cnt - 1;\n')
        fh.write('    end\n')
        fh.write('    if (reset_cnt != RESET_ZEROS) begin\n')
        fh.write('        next_reset_int = 1\'b1;\n')
        fh.write('    end else begin\n')
        fh.write('        next_reset_int = 1\'b0;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        if gen_2X:
            fh.write('input_buffer #(\n')
        else:
            fh.write('input_buffer_1x #(\n')
        fh.write('    .DATA_WIDTH({}),\n'.format(data_width))
        fh.write('    .FFT_SIZE_WIDTH({}))\n'.format(fft_bits))
        fh.write('u_input_buffer(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(reset_int),\n')
        fh.write('\n')
        fh.write('    .s_axis_tvalid(s_axis_tvalid),\n')
        fh.write('    .s_axis_tdata(s_axis_tdata),\n')
        fh.write('    .s_axis_tready(s_axis_tready),\n')
        fh.write('\n')
        fh.write('    .fft_size(fft_size_s),\n')
        fh.write('    .phase(buffer_phase),\n')
        fh.write('\n')
        fh.write('    .m_axis_tvalid(buffer_tvalid),\n')
        fh.write('    .m_axis_tdata(buffer_tdata),\n')
        fh.write('    .m_axis_final_cnt(buffer_tlast),\n')
        fh.write('    .m_axis_tready(buffer_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('{} u_pfb(\n'.format(pfb_name))
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(reset_int),\n')
        fh.write('\n')
        fh.write('    .s_axis_tvalid(buffer_tvalid),\n')
        fh.write('    .s_axis_tdata(buffer_tdata),\n')
        fh.write('    .s_axis_tlast(buffer_tlast),\n')
        fh.write('    .s_axis_tready(buffer_tready),\n')
        fh.write('\n')
        fh.write('    .num_phases(fft_size_s),\n')
        fh.write('    .phase(buffer_phase),\n')
        fh.write('    .phase_out(pfb_phase),\n')
        fh.write('\n')
        fh.write('    .s_axis_reload_tvalid(s_axis_reload_tvalid),\n')
        fh.write('    .s_axis_reload_tdata(s_axis_reload_tdata),\n')
        fh.write('    .s_axis_reload_tlast(s_axis_reload_tlast),\n')
        fh.write('    .s_axis_reload_tready(s_axis_reload_tready),\n')
        fh.write('\n')
        fh.write('    .m_axis_tvalid(pfb_tvalid),\n')
        fh.write('    .m_axis_tdata(pfb_tdata_s),\n')
        fh.write('    .m_axis_tlast(pfb_tlast),\n')
        fh.write('    .m_axis_tready(pfb_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        if gen_2X:
            fh.write('circ_buffer #(\n')
            fh.write('    .DATA_WIDTH({}),\n'.format(data_width))
            fh.write('    .FFT_SIZE_WIDTH({}))\n'.format(fft_bits))
            fh.write('u_circ_buffer(\n')
            fh.write('    .clk(clk),\n')
            fh.write('    .sync_reset(reset_int),\n')
            fh.write('\n')
            fh.write('    .s_axis_tvalid(pfb_tvalid),\n')
            fh.write('    .s_axis_tdata(pfb_tdata),\n')
            fh.write('    .s_axis_tlast(pfb_tlast),\n')
            fh.write('    .s_axis_tready(pfb_tready),\n')
            fh.write('\n')
            fh.write('    .fft_size(fft_size_s),\n')
            fh.write('    .phase(pfb_phase),\n')
            fh.write('    .phase_out(circ_phase),\n')
            fh.write('\n')
            fh.write('    .m_axis_tvalid(circ_tvalid),\n')
            fh.write('    .m_axis_tdata(circ_tdata),\n')
            fh.write('    .m_axis_tlast(circ_tlast),\n')
            fh.write('    .m_axis_tready(circ_tready)\n')
            fh.write(');\n')
        fh.write('\n')
        fh.write('{} u_fft(\n'.format(fft_name))
        fh.write('    .aclk(clk),\n')
        fh.write('    .aresetn(async_reset),\n')
        fh.write('    .s_axis_config_tvalid(fft_config_tvalid),\n')
        fh.write('    .s_axis_config_tdata(fft_config_tdata),\n')
        fh.write('    .s_axis_config_tready(fft_config_tready),\n')
        if gen_2X:
            fh.write('    .s_axis_data_tvalid(circ_tvalid),\n')
            fh.write('    .s_axis_data_tdata(circ_tdata),\n')
            fh.write('    .s_axis_data_tlast(circ_tlast),\n')
            fh.write('    .s_axis_data_tready(circ_tready),\n')
        else:
            fh.write('    .s_axis_data_tvalid(pfb_tvalid),\n')
            fh.write('    .s_axis_data_tdata(pfb_tdata),\n')
            fh.write('    .s_axis_data_tlast(pfb_tlast),\n')
            fh.write('    .s_axis_data_tready(pfb_tready),\n')

        fh.write('    .m_axis_data_tvalid(fft_tvalid),\n')
        fh.write('    .m_axis_data_tdata(fft_tdata_s),\n')
        fh.write('    .m_axis_data_tuser(fft_tuser),\n')
        fh.write('    .m_axis_data_tlast(fft_tlast),\n')
        fh.write('    .m_axis_data_tready(fft_tready),\n')
        fh.write('    .m_axis_status_tvalid(m_axis_status_tvalid),\n')
        fh.write('    .m_axis_status_tdata(m_axis_status_tdata),\n')
        fh.write('    .m_axis_status_tready(m_axis_status_tready),\n')
        fh.write('    .event_frame_started(event_frame_started),\n')
        fh.write('    .event_tlast_unexpected(event_tlast_unexpected),\n')
        fh.write('    .event_tlast_missing(event_tlast_missing),\n')
        fh.write('    .event_status_channel_halt(event_status_channel_halt),\n')
        fh.write('    .event_data_in_channel_halt(event_data_in_channel_halt),\n')
        fh.write('    .event_data_out_channel_halt(event_data_out_channel_halt)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('{} #(\n'.format(shift_name))
        fh.write(' .HEAD_ROOM(7\'d2))\n')
        fh.write('u_shifter(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(reset_int),\n')
        fh.write('\n')
        fh.write('    .s_axis_tvalid(fft_tvalid),\n')
        fh.write('    .s_axis_tdata(fft_tdata),\n')
        fh.write('    .s_axis_tuser(fft_tuser),\n')
        fh.write('    .s_axis_tlast(fft_tlast),\n')
        fh.write('    .s_axis_tready(fft_tready),\n')
        fh.write('\n')
        fh.write('    .fft_size(fft_size_s),\n')
        fh.write('    .avg_len(avg_len),\n')
        fh.write('\n')
        fh.write('    .m_axis_tvalid(shift_tvalid),\n')
        fh.write('    .m_axis_tdata(shift_tdata),\n')
        fh.write('    .m_axis_tuser(shift_tuser),\n')
        fh.write('    .m_axis_tlast(shift_tlast),\n')
        fh.write('\n')
        fh.write('    .eob_tag(shift_eob_tag),\n')
        fh.write('    .m_axis_tready(shift_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write(f'downselect_{Mmax} #(\n')
        fh.write('    .DATA_WIDTH({}))\n'.format(data_width))
        fh.write('u_downselect(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(reset_int),\n')
        fh.write('\n')
        fh.write('    .s_axis_tvalid(shift_tvalid),\n')
        fh.write('    .s_axis_tdata(shift_tdata),\n')
        fh.write('    .s_axis_tuser(shift_tuser),\n')
        fh.write('    .s_axis_tlast(shift_tlast),\n')
        fh.write('    .s_axis_tready(shift_tready),\n')
        fh.write('\n')
        fh.write('    .eob_tag(shift_eob_tag),\n')
        fh.write('\n')
        fh.write('    // down selection FIFO interface\n')
        fh.write('    .s_axis_select_tvalid(s_axis_select_tvalid),\n')
        fh.write('    .s_axis_select_tdata(s_axis_select_tdata),\n')
        fh.write('    .s_axis_select_tlast(s_axis_select_tlast),\n')
        fh.write('    .s_axis_select_tready(s_axis_select_tready),\n')
        fh.write('\n')
        fh.write('    .m_axis_tvalid(down_sel_tvalid),\n')
        fh.write('    .m_axis_tdata(down_sel_tdata),\n')
        fh.write('    .m_axis_tuser(down_sel_tuser),\n')
        fh.write('    .m_axis_tlast(down_sel_tlast),\n')
        fh.write('    .m_axis_tready(down_sel_tready),\n')
        fh.write('\n')
        fh.write('    .eob_downselect(eob_tag)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write(f'{final_cnt_name} #(\n')
        fh.write('    .DATA_WIDTH({}),\n'.format(data_width))
        fh.write('    .TUSER_WIDTH({}))\n'.format(tuser_bits))
        fh.write('u_final_cnt\n')
        fh.write('(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(reset_int),\n')
        fh.write('\n')
        fh.write('    .s_axis_tvalid(down_sel_tvalid),\n')
        fh.write('    .s_axis_tdata(down_sel_tdata),\n')
        fh.write('    .cnt_limit(payload_length_m1),\n')
        fh.write('    .s_axis_tuser(down_sel_tuser),\n')
        fh.write('    .s_axis_tlast(down_sel_tlast),\n')
        fh.write('    .s_axis_tready(down_sel_tready),\n')
        fh.write('\n')
        fh.write('    .m_axis_tvalid(m_axis_tvalid_s),\n')
        fh.write('    .m_axis_tdata(m_axis_tdata_s),\n')
        fh.write('    .m_axis_final_cnt(m_axis_tlast_s),\n')
        fh.write('    .m_axis_tuser(m_axis_tuser_s),\n')
        fh.write('    .count(),\n')
        fh.write('    .m_axis_tlast(),\n')
        fh.write('    .m_axis_tready(m_axis_tready_s)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('`ifdef SIM_BIN_WRITE\n')
        fh.write('\n')
        fh.write('    localparam buffer_out = "buffer_output.bin";\n')
        fh.write('    localparam pfb_out = "pfb_output.bin";\n')
        fh.write('    localparam circ_out = "circ_output.bin";\n')
        fh.write('    localparam fft_out = "fft_output.bin";\n')
        fh.write('    localparam exp_out = "exp_output.bin";\n')
        fh.write('    localparam down_select_out = "down_select_output.bin";\n')
        fh.write('    localparam final_out = "final_output.bin";\n')
        fh.write('\n')
        fh.write('    integer buffer_descr, pfb_descr, circ_descr, fft_descr, exp_descr, down_descr, final_descr;\n')
        fh.write('\n')
        fh.write('    initial begin\n')
        fh.write('        buffer_descr = $fopen(buffer_out, "wb");\n')
        fh.write('        pfb_descr = $fopen(pfb_out, "wb");\n')
        fh.write('        circ_descr = $fopen(circ_out, "wb");\n')
        fh.write('        fft_descr = $fopen(fft_out, "wb");\n')
        fh.write('        exp_descr = $fopen(exp_out, "wb");\n')
        fh.write('        down_descr = $fopen(down_select_out, "wb");\n')
        fh.write('        final_descr = $fopen(final_out, "wb");\n')
        fh.write('    end\n')
        fh.write('\n')
        fh.write('    wire buffer_take, pfb_take, circ_take, fft_take, exp_take, down_take, final_take;\n')
        fh.write('\n')
        fh.write('    wire [63:0] buffer_st_tdata;\n')
        fh.write('    wire [63:0] pfb_st_tdata;\n')
        fh.write('    wire [63:0] fft_st_tdata;\n')
        fh.write('    wire [63:0] exp_st_tdata;\n')
        fh.write('    wire [63:0] count_st_tdata;\n')
        fh.write('    wire [31:0] circ_st_tdata;\n')
        fh.write('    wire [63:0] exp_st_tdata;\n')
        fh.write('    wire [63:0] down_st_tdata;\n')
        fh.write('    wire [63:0] final_st_tdata;\n')
        fh.write('\n')
        buffer_pad = 64 - data_width - (fft_bits - 1)
        fft_pad = 64 - data_width - 24
        fh.write('    assign buffer_st_tdata = {{{}\'d0, buffer_phase, buffer_tdata}};\n'.format(buffer_pad))
        fh.write('    assign pfb_st_tdata = {{{}\'d0, pfb_phase, pfb_tdata}};\n'.format(buffer_pad))
        fh.write('    assign fft_st_tdata = {{{}\'d0, fft_tuser, fft_tdata}};\n'.format(fft_pad))
        fh.write('    assign exp_st_tdata = {{{}\'d0, shift_tuser, shift_tdata}};\n'.format(fft_pad))
        fh.write('    assign down_st_tdata = {{{}\'d0, down_sel_tuser, down_sel_tdata}};\n'.format(fft_pad))
        fh.write('    assign final_st_tdata = {{{}\'d0, m_axis_tuser_s, m_axis_tdata_s}};\n'.format(fft_pad))
        fh.write('\n')
        fh.write('    assign circ_st_tdata = circ_tdata_s;\n')
        fh.write('\n')
        fh.write('    assign buffer_take = buffer_tvalid & buffer_tready;\n')
        fh.write('    assign pfb_take = pfb_tvalid & pfb_tready;\n')
        fh.write('\n')
        fh.write('    assign circ_take = circ_tvalid & circ_tready;\n')
        fh.write('    assign fft_take = fft_tvalid & fft_tready;\n')
        fh.write('    assign exp_take = shift_tvalid & shift_tready;\n')
        fh.write('    assign down_take = down_sel_tvalid & down_sel_tready;\n')
        fh.write('    assign final_take = m_axis_tvalid_s & m_axis_tready_s;\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(8)\n')
        fh.write('    )\n')
        fh.write('    u_buffer_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(buffer_descr),\n')
        fh.write('\n')
        fh.write('        .valid(buffer_take),\n')
        fh.write('        .word(buffer_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('        );\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(8)\n')
        fh.write('    )\n')
        fh.write('    u_pfb_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(pfb_descr),\n')
        fh.write('\n')
        fh.write('        .valid(pfb_take),\n')
        fh.write('        .word(pfb_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('    );\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(4)\n')
        fh.write('    )\n')
        fh.write('    u_circ_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(circ_descr),\n')
        fh.write('\n')
        fh.write('        .valid(circ_take),\n')
        fh.write('        .word(circ_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('    );\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(8)\n')
        fh.write('        )\n')
        fh.write('    u_fft_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(fft_descr),\n')
        fh.write('\n')
        fh.write('        .valid(fft_take),\n')
        fh.write('        .word(fft_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('        );\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(8)\n')
        fh.write('        )\n')
        fh.write('    u_exp_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(exp_descr),\n')
        fh.write('\n')
        fh.write('        .valid(exp_take),\n')
        fh.write('        .word(exp_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('        );\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(8)\n')
        fh.write('        )\n')
        fh.write('    u_downselect_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(down_descr),\n')
        fh.write('\n')
        fh.write('        .valid(down_take),\n')
        fh.write('        .word(down_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('        );\n')
        fh.write('\n')
        fh.write('    grc_word_writer #(\n')
        fh.write('        .LISTEN_ONLY(1),\n')
        fh.write('        .ARRAY_LENGTH(1024),\n')
        fh.write('        .NUM_BYTES(8)\n')
        fh.write('        )\n')
        fh.write('    u_final_wr\n')
        fh.write('    (\n')
        fh.write('        .clk(clk),\n')
        fh.write('        .sync_reset(reset_int),\n')
        fh.write('        .enable(1\'b1),\n')
        fh.write('\n')
        fh.write('        .fd(final_descr),\n')
        fh.write('\n')
        fh.write('        .valid(final_take),\n')
        fh.write('        .word(final_st_tdata),\n')
        fh.write('\n')
        fh.write('        .wr_file(1\'b0),\n')
        fh.write('\n')
        fh.write('        .rdy_i(1\'b1),\n')
        fh.write('        .rdy_o()\n')
        fh.write('        );\n')
        fh.write('\n')
        fh.write('`endif\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('endmodule\n')

    return mod_name, file_name


